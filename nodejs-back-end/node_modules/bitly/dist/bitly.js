module.exports =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
module.exports = __webpack_require__(2);


/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = require("babel-polyfill");

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
var _a = __webpack_require__(3), doRequest = _a.doRequest, sortUrlsAndHash = _a.sortUrlsAndHash, generateUrl = _a.generateUrl;
/**
 *
 * This is the main Bitly module that returns an object of methods.  You need to pass in your
 * OAuth access token, as well as an optional config object. You are returned several helper
 * methods, as well as access to a method to pass any bitly api request to.
 *
 * For information on the data returned from the API, see the docs at
 * https://dev.bitly.com/api.html
 *
 * @module node-bitly
 * @type {function}
 * @param {string} accessToken The access token, this from an OAuth session
 * @param {object=} config Optional config object
 * @returns {Bitly}
 * @example
 *  const BitlyClient = require('bitly');
 *  const bitly = BitleyClient('<accessToken>');
 *  const myFunc = async(uri = 'https://github.com/tanepiper/node-bitly') => {
 *    try {
 *      return await bitly.shorten(uri);
 *   } catch(e) {
 *      throw e;
 *    }
 *  }
 */
module.exports = function (accessToken, config) {
    /**
      * This is used to return the page title for a given Bitlink.
      * @param  {array<string>} items An array of short urls or hashes
      * @return {object} The results of the request
      */
    var info = function (items) {
        if (items === void 0) { items = []; }
        return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, bitlyRequest('info', sortUrlsAndHash(items))];
                case 1: return [2 /*return*/, _a.sent()];
            }
        }); });
    };
    /**
       * Used to shorted a url
       * @param  {string} longUrl The URL to be shortened
       * @return {object} The results of the request
       */
    var shorten = function (longUrl) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('shorten', { longUrl: longUrl })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
       * Request to expand urls and hashes
       * @param  {string|array<string>} items A string or array of strings of short urls and hashes.
       * @return {object} The results of the request
       */
    var expand = function (items) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('expand', sortUrlsAndHash(items))];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
         * Request to get clicks for urls and hashes
         * @param  {string|array<string>} items A string or array of strings of short urls and hashes.
         * @return {object}
         */
    var clicks = function (items) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('clicks', sortUrlsAndHash(items))];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
      * Request to get clicks by minute for urls and hashes
      * @param  {string|array<string>} items A string or array of strings of short urls and hashes.
      * @return {object}
      */
    var clicksByMinute = function (items) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('clicks_by_minute', sortUrlsAndHash(items))];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
      * Request to get clicks by day for urls and hashes
      * @param  {string|array<string>} items A string or array of strings of short urls and hashes.
      * @return {object}
      */
    var clicksByDay = function (items) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('clicks_by_day', sortUrlsAndHash(items))];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
      * Lookup a single url
      * @param  {string} url The url to look up
      * @return {object}
      */
    var lookup = function (url) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('lookup', { url: url })];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
      * Request referrers for a single url
      * @param  {string} uri The uri to look up
      * @return {object}
      */
    var referrers = function (item) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('referrers', sortUrlsAndHash([item]))];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
      * Request countries for a single url
      * @param  {string} uri The uri to look up
      * @return {object}
      */
    var countries = function (item) { return __awaiter(_this, void 0, void 0, function () { return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, bitlyRequest('countries', sortUrlsAndHash([item]))];
            case 1: return [2 /*return*/, _a.sent()];
        }
    }); }); };
    /**
     * Perform any bitly API request using a method name and passed data object
     * @param {string} method The method name to be called on the API
     * @param {object} data The data object to be passed. Keys should be query paramaters
     * @return {object} The bitly request return data
     */
    var bitlyRequest = function (method, data) { return __awaiter(_this, void 0, void 0, function () {
        var result, err, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, doRequest({
                            accessToken: accessToken,
                            method: method,
                            config: config,
                            data: data,
                        })];
                case 1:
                    result = _a.sent();
                    if (result.status_code >= 200 && result.status_code < 400) {
                        return [2 /*return*/, result];
                    }
                    err = new Error("[node-bitly] Request returned " + result.status_code + ": " + result.status_txt);
                    err.statusCode = result.status_code;
                    err.data = result.data;
                    throw err;
                case 2:
                    e_1 = _a.sent();
                    throw e_1;
                case 3: return [2 /*return*/];
            }
        });
    }); };
    return {
        shorten: shorten,
        expand: expand,
        clicks: clicks,
        clicksByMinute: clicksByMinute,
        clicksByDay: clicksByDay,
        lookup: lookup,
        info: info,
        referrers: referrers,
        countries: countries,
        bitlyRequest: bitlyRequest,
    };
};
/**
 * Bitly object definition
 * @typedef {object} Bitly
 * @property {Function} shorten Function that takes a url and shortens it. Accepts valid URL.
 * @property {Function} expends Function that gets long urls for short urls. Accepts string or array of strings.
 * @property {Function} clicks Function that gets the number of clicks of short urls. Accepts string or array of strings.
 * @property {Function} clicksByMinute Function that gets the number of clicks by minute for short urls. Accepts string or array of strings.
 * @property {Function} clicksByDay Function that gets the number of clicks by day for short urls. Accepts string or array of strings.
 * @property {Function} lookup Function that takes a url looks up data. Accepts valid URL.
 * @property {Function} info Function that takes a url and gets info. Accepts valid URL.
 * @property {Function} referrers Function that gets referrers for urls. Accepts valid URL.
 * @property {Function} countries Function that gets click by countries for urls. Accepts valid URL.
 * @property {Function} bitlyRequest Function that allows you to to any bitly request
 */


/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
var url = __webpack_require__(4);
var request = __webpack_require__(5);
var isUri = __webpack_require__(6).isUri;
/**
 * The internal library of node-bitly
 * @module node-bitly.lib
 * @private
 */
/**
 * Generates a valid URL for a GET request to the Bit.ly API
 * @param {object} UrlParameters An object of paramters to pass to generate a bit.ly url
 * @param {string} accessToken Your bit.ly access token
 * @param {string} method The method to call
 * @param {object} data a data object specifying bit.ly keys for your method
 * @param {object} config A custom config object to overide values
 * @private
 *
 * @example
 * generateUrl({method: 'shorten', accessKey: 'myaccessKey', data: { longUrl: 'https://github.com/tanepiper/node-bitly' } });
 */
var generateUrl = function (accessToken, method, data, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.apiUrl, apiUrl = _c === void 0 ? 'api-ssl.bitly.com' : _c, _d = _b.apiVersion, apiVersion = _d === void 0 ? 'v3' : _d, _e = _b.domain, domain = _e === void 0 ? 'bit.ly' : _e, _f = _b.format, format = _f === void 0 ? 'json' : _f;
    var newQuery = Object.assign({
        access_token: accessToken,
        domain: domain,
        format: format,
    });
    Object.keys(data || []).forEach(function (key) { return (newQuery[key] = data[key]); });
    return url.parse(url.format({
        protocol: 'https',
        hostname: apiUrl,
        pathname: "/" + apiVersion + "/" + method,
        query: newQuery,
    }));
};
/**
 * Method called to generate a url and call the request
 * @param {object} options The options object
 * @param {string} options.accessToken The request accessToken
 * @param {string} options.method The method to be called on Bitly
 * @param {object} options.data A data object with key=>value pairs mapped to request parameters
 * @param {config} options.config A object that overrides the default values for a request
 * @returns {object} The request result object
 */
var doRequest = function (_a) {
    var accessToken = _a.accessToken, method = _a.method, data = _a.data, config = _a.config;
    return __awaiter(_this, void 0, void 0, function () {
        var uri, req, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    uri = generateUrl(accessToken, method, data, config);
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, request({ uri: uri })];
                case 2:
                    req = _b.sent();
                    return [2 /*return*/, JSON.parse(req)];
                case 3:
                    error_1 = _b.sent();
                    throw error_1;
                case 4: return [2 /*return*/];
            }
        });
    });
};
/**
* Function to check through an array of items to check for short urls or hashes
* If only passed one item, put in array for url checking
* @param  {Array<string>} unsortedItems The array of items to be checked
* @param  {object} query The query object
* @return {object}
*/
var sortUrlsAndHash = function (unsortedItems, result) {
    if (result === void 0) { result = { shortUrl: [], hash: [] }; }
    (Array.isArray(unsortedItems) ? unsortedItems : [unsortedItems]).map(function (item) {
        return isUri(item) ? result.shortUrl.push(item) : typeof item === 'string' && result.hash.push(item);
    });
    return result;
};
module.exports = {
    generateUrl: generateUrl,
    doRequest: doRequest,
    sortUrlsAndHash: sortUrlsAndHash,
};


/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = require("url");

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = require("request-promise");

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = require("valid-url");

/***/ })
/******/ ]);
//# sourceMappingURL=bitly.js.map